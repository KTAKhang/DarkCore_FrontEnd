import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useDispatch, useSelector } from 'react-redux';
import { toast } from 'react-toastify';
import { Minus, Plus, Trash2, ArrowLeft, Shield, Truck, Headphones } from 'lucide-react';
import Header from '../components/Header/Header';
import {
    cartGetRequest,
    cartUpdateRequest,
    cartRemoveRequest,
    cartClearRequest,
    cartClearMessage
} from '../redux/actions/cartActions';

const CartPage = () => {
    const navigate = useNavigate(); // Kh·ªüi t·∫°o hook useNavigate ƒë·ªÉ ƒëi·ªÅu h∆∞·ªõng
    const dispatch = useDispatch(); // Kh·ªüi t·∫°o hook useDispatch ƒë·ªÉ dispatch action

    // L·∫•y state t·ª´ Redux store (cart, loading, error)
    const { cart, loading, error } = useSelector((state) => state.cart || {});
    const [searchTerm, setSearchTerm] = useState(''); // State ƒë·ªÉ l∆∞u gi√° tr·ªã t√¨m ki·∫øm
    const [couponCode, setCouponCode] = useState(''); // State ƒë·ªÉ l∆∞u m√£ gi·∫£m gi√°

    // Debug log tr·∫°ng th√°i ban ƒë·∫ßu
    useEffect(() => {
        console.log('CartPage state:', { cart, loading, error }); // Ghi log tr·∫°ng th√°i Redux ƒë·ªÉ debug
        const token = localStorage.getItem('token'); // L·∫•y token t·ª´ localStorage
        if (!token) {
            console.log('CartPage: No token found, redirecting to login'); // Ghi log n·∫øu kh√¥ng c√≥ token
            toast.error('Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem gi·ªè h√†ng'); // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
            navigate('/login'); // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang ƒëƒÉng nh·∫≠p
            return;
        }
        console.log('CartPage: Dispatching cartGetRequest with token:', token); // Ghi log khi dispatch action
        dispatch(cartGetRequest()); // Dispatch action ƒë·ªÉ l·∫•y gi·ªè h√†ng
    }, [dispatch, navigate]); // Ch·∫°y l·∫°i khi dispatch ho·∫∑c navigate thay ƒë·ªïi

    // X·ª≠ l√Ω l·ªói gi·ªè h√†ng
    useEffect(() => {
        if (error) {
            console.log('CartPage error:', error); // Ghi log l·ªói ƒë·ªÉ debug
            dispatch(cartClearMessage()); // Dispatch action ƒë·ªÉ x√≥a th√¥ng b√°o l·ªói
        }
    }, [error, dispatch]); // Ch·∫°y l·∫°i khi error ho·∫∑c dispatch thay ƒë·ªïi

    // H√†m ƒë·ªãnh d·∫°ng gi√° ti·ªÅn sang ƒë·ªãnh d·∫°ng VND
    const formatPrice = (price) => {
        return new Intl.NumberFormat('vi-VN').format(price) + '‚Ç´'; // ƒê·ªãnh d·∫°ng gi√° v·ªõi d·∫•u ‚Ç´
    };

    // T√≠nh t·ªïng t·∫°m t√≠nh c·ªßa gi·ªè h√†ng
    const calculateSubtotal = () => {
        return cart?.items?.reduce((total, item) => total + item.price * item.quantity, 0) || 0; // T√≠nh t·ªïng gi√° (gi√° * s·ªë l∆∞·ª£ng)
    };

    // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
    const updateQuantity = (productId, change) => {
        const item = cart?.items?.find((i) => i.productId === productId); // T√¨m s·∫£n ph·∫©m trong gi·ªè h√†ng
        if (!item) return; // Tho√°t n·∫øu kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m
        const newQuantity = Math.max(1, item.quantity + change); // ƒê·∫£m b·∫£o s·ªë l∆∞·ª£ng kh√¥ng nh·ªè h∆°n 1
        console.log('CartPage: Updating quantity', { productId, newQuantity }); // Ghi log khi c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng
        dispatch(cartUpdateRequest(productId, newQuantity)); // Dispatch action c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng
    };

    // X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
    const removeItem = (productId) => {
        console.log('CartPage: Removing item', { productId }); // Ghi log khi x√≥a s·∫£n ph·∫©m
        dispatch(cartRemoveRequest(productId)); // Dispatch action x√≥a s·∫£n ph·∫©m
    };

    // X√≥a to√†n b·ªô gi·ªè h√†ng
    const clearCart = () => {
        console.log('CartPage: Clearing cart'); // Ghi log khi x√≥a to√†n b·ªô gi·ªè h√†ng
        dispatch(cartClearRequest()); // Dispatch action x√≥a gi·ªè h√†ng
    };

    // T√≠nh t·ªïng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè
    const totalItems = cart?.items?.reduce((sum, item) => sum + item.quantity, 0) || 0; // T·ªïng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m

    // Debug log tr∆∞·ªõc khi render
    console.log('CartPage render:', { loading, cartItems: cart?.items, totalItems }); // Ghi log tr·∫°ng th√°i tr∆∞·ªõc render

    return (
        <>
            {/* <Header searchTerm={searchTerm} setSearchTerm={setSearchTerm}/> */}
            <div className="min-h-screen bg-gray-50 py-8">
                <div className="container mx-auto px-4">
                    <div className="mb-8">
                        <h1 className="text-3xl font-bold text-gray-900 mb-2">Gi·ªè h√†ng c·ªßa b·∫°n</h1>
                        <p className="text-gray-600">{totalItems} s·∫£n ph·∫©m trong gi·ªè h√†ng</p>
                    </div>

                    {/* FIX: X√ìA ALERT ƒê·ªé TR√äN UI ƒê·ªÇ TR√ÅNH DUPLICATE VISUAL V·ªöI TOAST T·ª™ SAGA */}
                    {/* {error && (
                        <div className="text-center py-12 text-red-600">
                            <h3 className="text-xl font-medium mb-2">L·ªói: {error || 'Kh√¥ng th·ªÉ t·∫£i gi·ªè h√†ng'}</h3>
                            <button
                                onClick={() => dispatch(cartGetRequest())}
                                className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors"
                            >
                                Th·ª≠ l·∫°i
                            </button>
                        </div>
                    )} */}
                    {loading && !error && (
                        <div className="text-center py-12">
                            {console.log('CartPage: Loading state', loading)}
                            <div className="text-6xl mb-4">‚è≥</div>
                            <h3 className="text-xl font-medium text-gray-900 mb-2">ƒêang t·∫£i gi·ªè h√†ng...</h3>
                        </div>
                    )}
                    {!loading && !error && (!cart || !cart.items || cart.items.length === 0) && (
                        <div className="text-center py-12">
                            <div className="text-6xl mb-4">üì¶</div>
                            <h3 className="text-xl font-medium text-gray-900 mb-2">Gi·ªè h√†ng tr·ªëng</h3>
                            <button
                                onClick={() => navigate('/products')}
                                className="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors"
                            >
                                Ti·∫øp t·ª•c mua s·∫Øm
                            </button>
                        </div>
                    )}
                    {!loading && !error && cart?.items?.length > 0 && (
                        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
                            <div className="lg:col-span-2">
                                <div className="bg-white rounded-xl shadow-sm overflow-hidden">
                                    <div className="p-6 border-b border-gray-100">
                                        <h2 className="text-xl font-bold text-gray-900">S·∫£n ph·∫©m</h2>
                                    </div>
                                    <div className="divide-y divide-gray-100">
                                        {cart.items.map((item) => (
                                            <div key={item.productId} className="p-6">
                                                <div className="flex items-start gap-4">
                                                    <div className="flex-shrink-0">
                                                        <img
                                                            alt={item.name || 'S·∫£n ph·∫©m'}
                                                            className="w-20 h-20 object-cover rounded-lg"
                                                            src={item.image || '/placeholder-product.jpg'}
                                                        />
                                                    </div>
                                                    <div className="flex-1 min-w-0">
                                                        <h3 className="font-bold text-gray-900 mb-2">{item.name || 'S·∫£n ph·∫©m'}</h3>
                                                        <div className="flex items-center justify-between">
                                                            <div className="flex items-center gap-3">
                                                                <div className="flex items-center border border-gray-200 rounded-lg">
                                                                    <button
                                                                        onClick={() => updateQuantity(item.productId, -1)}
                                                                        disabled={loading || item.quantity <= 1}
                                                                        className="w-10 h-10 flex items-center justify-center hover:bg-gray-50 transition-colors disabled:opacity-50"
                                                                    >
                                                                        <Minus className="w-4 h-4 text-gray-600" />
                                                                    </button>
                                                                    <span className="w-12 text-center font-medium">{item.quantity}</span>
                                                                    <button
                                                                        onClick={() => updateQuantity(item.productId, 1)}
                                                                        disabled={loading}
                                                                        className="w-10 h-10 flex items-center justify-center hover:bg-gray-50 transition-colors disabled:opacity-50"
                                                                    >
                                                                        <Plus className="w-4 h-4 text-gray-600" />
                                                                    </button>
                                                                </div>
                                                                <button
                                                                    onClick={() => removeItem(item.productId)}
                                                                    disabled={loading}
                                                                    className="w-10 h-10 flex items-center justify-center text-red-500 hover:bg-red-50 rounded-lg transition-colors disabled:opacity-50"
                                                                >
                                                                    <Trash2 className="w-4 h-4" />
                                                                </button>
                                                            </div>
                                                            <div className="text-right">
                                                                <div className="font-bold text-red-600 text-lg">
                                                                    {formatPrice(item.price * item.quantity)}
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        ))}
                                    </div>
                                </div>
                                <div className="mt-6 flex justify-between">
                                    <button
                                        onClick={() => navigate('/products')}
                                        className="flex items-center gap-2 text-blue-600 hover:text-blue-700 transition-colors"
                                    >
                                        <ArrowLeft className="w-4 h-4" />
                                        Ti·∫øp t·ª•c mua s·∫Øm
                                    </button>
                                    <button
                                        onClick={clearCart}
                                        disabled={loading}
                                        className="flex items-center gap-2 text-red-600 hover:text-red-700 transition-colors disabled:opacity-50"
                                    >
                                        <Trash2 className="w-4 h-4" />
                                        X√≥a t·∫•t c·∫£
                                    </button>
                                </div>
                            </div>
                            <div className="lg:col-span-1">
                                <div className="bg-white rounded-xl shadow-sm p-6 sticky top-8">
                                    <h2 className="text-xl font-bold text-gray-900 mb-6">T·ªïng k·∫øt ƒë∆°n h√†ng</h2>
                                    <div className="space-y-4 mb-6">
                                        <div className="flex justify-between">
                                            <span className="text-gray-600">T·∫°m t√≠nh:</span>
                                            <span className="font-medium">{formatPrice(calculateSubtotal())}</span>
                                        </div>
                                        <div className="flex justify-between">
                                            <span className="text-gray-600">Ph√≠ v·∫≠n chuy·ªÉn:</span>
                                            <span className="font-medium">Mi·ªÖn ph√≠</span>
                                        </div>
                                        <div className="text-sm text-green-600 bg-green-50 p-3 rounded-lg flex items-center">
                                            <Truck className="w-4 h-4 mr-2" />
                                            Mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn cho ƒë∆°n h√†ng tr√™n 50 tri·ªáu
                                        </div>
                                        <div className="border-t border-gray-200 pt-4">
                                            <div className="flex justify-between items-center">
                                                <span className="text-lg font-bold text-gray-900">T·ªïng c·ªông:</span>
                                                <span className="text-2xl font-bold text-red-600">
                                                    {formatPrice(calculateSubtotal())}
                                                </span>
                                            </div>
                                        </div>
                                    </div>
                                    <div className="space-y-3">
                                        <button
                                            className="w-full bg-blue-600 text-white py-4 rounded-lg hover:bg-blue-700 transition-colors font-bold disabled:opacity-50"
                                            disabled={loading || !cart?.items?.length}
                                        >
                                            Thanh to√°n ngay
                                        </button>
                                        <button
                                            className="w-full border border-gray-300 text-gray-700 py-3 rounded-lg hover:bg-gray-50 transition-colors font-medium disabled:opacity-50"
                                            disabled={loading || !cart?.items?.length}
                                        >
                                            Mua tr∆∞·ªõc tr·∫£ sau
                                        </button>
                                    </div>
                                    <div className="mt-6 pt-6 border-t border-gray-200">
                                        <h3 className="font-bold text-gray-900 mb-3">∆Øu ƒë√£i & Khuy·∫øn m√£i</h3>
                                        <div className="flex gap-2">
                                            <input
                                                type="text"
                                                placeholder="Nh·∫≠p m√£ gi·∫£m gi√°"
                                                value={couponCode}
                                                onChange={(e) => setCouponCode(e.target.value)}
                                                className="flex-1 px-3 py-2 border border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm"
                                            />
                                            <button className="bg-gray-100 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-200 transition-colors text-sm font-medium whitespace-nowrap">
                                                √Åp d·ª•ng
                                            </button>
                                        </div>
                                    </div>
                                    <div className="mt-6 pt-6 border-t border-gray-200">
                                        <div className="flex items-center gap-3 text-sm text-gray-600">
                                            <Shield className="w-4 h-4 text-green-500" />
                                            <span>B·∫£o h√†nh ch√≠nh h√£ng</span>
                                        </div>
                                        <div className="flex items-center gap-3 text-sm text-gray-600 mt-2">
                                            <Truck className="w-4 h-4 text-blue-500" />
                                            <span>Giao h√†ng to√†n qu·ªëc</span>
                                        </div>
                                        <div className="flex items-center gap-3 text-sm text-gray-600 mt-2">
                                            <Headphones className="w-4 h-4 text-purple-500" />
                                            <span>H·ªó tr·ª£ 24/7</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    )}
                </div>
            </div>
        </>
    );
};

export default CartPage;