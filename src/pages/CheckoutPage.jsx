import { useState, useEffect } from "react";
import { useLocation, useNavigate } from "react-router-dom";
import { toast } from "react-toastify";
import { ArrowLeft, CreditCard, User } from "lucide-react";
import apiClient from '../utils/axiosConfig';

const CheckoutPage = () => {
  const navigate = useNavigate();
  const { state } = useLocation();
  const fallback = (() => {
    try {
      return JSON.parse(localStorage.getItem('pendingCheckout')) || null;
    } catch {
      return null;
    }
  })();
  
  // ‚úÖ L·∫§Y TH√îNG TIN T·ª™ PENDING CHECKOUT (ch∆∞a c√≥ order)
  const checkoutData = state || fallback;
  const amount = checkoutData?.totalPrice;
  const userId = checkoutData?.userId;
  const discount = checkoutData?.discount || 0;
  const subtotal = checkoutData?.subtotal;
  
  // ‚úÖ Wrap items in useMemo to avoid re-creating array on every render
  const items = useState(() => checkoutData?.items || [])[0];
  
  const [loading, setLoading] = useState(false);
  
  // ‚úÖ Pre-fill form v·ªõi data t·ª´ CartPage
  const [formData, setFormData] = useState({
    fullName: checkoutData?.customerInfo?.fullName || '',
    phone: checkoutData?.customerInfo?.phone || '',
    address: checkoutData?.customerInfo?.address || '',
    note: ''
  });

  // Ki·ªÉm tra d·ªØ li·ªáu t·ª´ CartPage
  useEffect(() => {
    console.log('üîç CheckoutPage - Received checkoutData:', checkoutData);
    if (!checkoutData || !amount || !userId || !items.length) {
      console.error('‚ùå CheckoutPage - Missing checkout data, redirecting to cart');
      toast.error('Th√¥ng tin gi·ªè h√†ng kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i.');
      navigate('/customer/cart');
    }
  }, [checkoutData, amount, userId, items, navigate]);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handlePayment = async () => {
    // Validate form
    if (!formData.fullName.trim()) {
      toast.error('Vui l√≤ng nh·∫≠p h·ªç v√† t√™n');
      return;
    }
    if (!formData.phone.trim()) {
      toast.error('Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i');
      return;
    }
    if (!formData.address.trim()) {
      toast.error('Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ');
      return;
    }
    
    try {
      setLoading(true);
      
      // ‚úÖ L∆ØU TH√îNG TIN ƒê·∫¶Y ƒê·ª¶ V√ÄO LOCALSTORAGE ƒë·ªÉ t·∫°o order sau khi thanh to√°n th√†nh c√¥ng
      const orderData = {
        userId,
        items: items.map(item => ({
          productId: item.productId,
          quantity: item.quantity
        })),
        receiverName: formData.fullName.trim(),
        receiverPhone: formData.phone.trim(),
        receiverAddress: formData.address.trim(),
        paymentMethod: 'vnpay',
        note: formData.note.trim(),
        shippingFee: 0,
        discount,
        subtotal,
        totalPrice: amount
      };
      
      console.log('üíæ Saving order data for post-payment creation:', orderData);
      localStorage.setItem('pendingOrderData', JSON.stringify(orderData));
      
      // ‚úÖ T·∫†O PAYMENT URL (KH√îNG T·∫†O ORDER)
      // S·ª≠ d·ª•ng timestamp l√†m txnRef t·∫°m th·ªùi
      const tempTxnRef = `TEMP_${Date.now()}`;
      
      const { data } = await apiClient.post('/payment/vnpay/create', {
        txnRef: tempTxnRef,  // ‚úÖ Backend nh·∫≠n txnRef thay v√¨ orderId
        amount: amount,
        bankCode: undefined,
        orderData: orderData // ‚úÖ G·ª≠i k√®m orderData (optional, ƒë·ªÉ backend log)
      });
      
      if (data.status === 'OK' && data.data.paymentUrl) {
        console.log('‚úÖ Payment URL created, redirecting to VNPay...');
        window.location.href = data.data.paymentUrl;
      } else {
        throw new Error(data.message || 'Kh√¥ng th·ªÉ t·∫°o URL thanh to√°n');
      }
    } catch (error) {
      const errorMessage = error.response?.data?.message || error.message || 'C√≥ l·ªói x·∫£y ra khi t·∫°o thanh to√°n';
      toast.error(errorMessage);
      console.error('‚ùå Payment error:', error);
    } finally {
      setLoading(false);
    }
  };

  const formatPrice = (price) => {
    return new Intl.NumberFormat('vi-VN').format(price) + '‚Ç´';
  };

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="container mx-auto px-4 max-w-4xl">
        {/* Header */}
        <div className="mb-8">
          <button
            onClick={() => navigate('/customer/cart')}
            className="flex items-center gap-2 text-blue-600 hover:text-blue-700 mb-4"
          >
            <ArrowLeft className="w-4 h-4" />
            Quay l·∫°i gi·ªè h√†ng
          </button>
          <h1 className="text-3xl font-bold text-gray-900">Thanh to√°n</h1>
          <p className="text-gray-600 mt-2">Ho√†n t·∫•t ƒë∆°n h√†ng c·ªßa b·∫°n</p>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* Th√¥ng tin giao h√†ng */}
          <div className="bg-white rounded-xl shadow-sm p-6">
            <div className="flex items-center gap-3 mb-6">
              <User className="w-6 h-6 text-blue-600" />
              <h2 className="text-xl font-bold text-gray-900">Th√¥ng tin giao h√†ng</h2>
            </div>
            
            <form className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  H·ªç v√† t√™n *
                </label>
                <input
                  type="text"
                  name="fullName"
                  value={formData.fullName}
                  onChange={handleInputChange}
                  placeholder="Nh·∫≠p h·ªç v√† t√™n"
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  required
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  S·ªë ƒëi·ªán tho·∫°i *
                </label>
                <input
                  type="tel"
                  name="phone"
                  value={formData.phone}
                  onChange={handleInputChange}
                  placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  required
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  ƒê·ªãa ch·ªâ *
                </label>
                <input
                  type="text"
                  name="address"
                  value={formData.address}
                  onChange={handleInputChange}
                  placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ giao h√†ng"
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  required
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Ghi ch√∫
                </label>
                <textarea
                  name="note"
                  value={formData.note}
                  onChange={handleInputChange}
                  placeholder="Ghi ch√∫ cho ƒë∆°n h√†ng (t√πy ch·ªçn)"
                  rows={3}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none"
                />
              </div>
            </form>
          </div>

          {/* T√≥m t·∫Øt ƒë∆°n h√†ng */}
          <div className="bg-white rounded-xl shadow-sm p-6">
            <div className="flex items-center gap-3 mb-6">
              <CreditCard className="w-6 h-6 text-blue-600" />
              <h2 className="text-xl font-bold text-gray-900">T√≥m t·∫Øt ƒë∆°n h√†ng</h2>
            </div>
            
            <div className="space-y-4 mb-6">
              <div className="flex justify-between">
                <span className="text-gray-600">S·ªë l∆∞·ª£ng s·∫£n ph·∫©m:</span>
                <span className="font-medium">{items.length} s·∫£n ph·∫©m</span>
              </div>
              
              {discount > 0 && (
                <div className="flex justify-between text-green-600">
                  <span>Gi·∫£m gi√°:</span>
                  <span className="font-medium">-{formatPrice(discount)}</span>
                </div>
              )}
              
              <div className="border-t pt-4 flex justify-between">
                <span className="text-lg font-bold text-gray-900">T·ªïng ti·ªÅn:</span>
                <span className="text-2xl font-bold text-red-600">
                  {formatPrice(amount)}
                </span>
              </div>
            </div>

            <div className="border-t pt-4">
              <button
                onClick={handlePayment}
                disabled={loading}
                className="w-full bg-blue-600 text-white py-4 rounded-lg hover:bg-blue-700 font-bold disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2"
              >
                {loading ? (
                  <>
                    <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white"></div>
                    ƒêang x·ª≠ l√Ω...
                  </>
                ) : (
                  <>
                    <CreditCard className="w-5 h-5" />
                    Thanh to√°n VNPay
                  </>
                )}
              </button>
              
              <p className="text-xs text-gray-500 text-center mt-3">
                B·∫°n s·∫Ω ƒë∆∞·ª£c chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang thanh to√°n VNPay
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default CheckoutPage;
