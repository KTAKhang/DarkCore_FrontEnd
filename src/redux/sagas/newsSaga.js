import { call, put, takeLatest } from "redux-saga/effects"; // Import c√°c h√†m t·ª´ redux-saga ƒë·ªÉ qu·∫£n l√Ω side effects
import { toast } from "react-toastify"; // Import toast ƒë·ªÉ hi·ªÉn th·ªã th√¥ng b√°o ng∆∞·ªùi d√πng
import axios from "axios"; // Import axios ƒë·ªÉ th·ª±c hi·ªán c√°c y√™u c·∫ßu HTTP
import * as actions from "../actions/newsActions"; // Import t·∫•t c·∫£ action creators t·ª´ newsActions

// ================================
// 1Ô∏è‚É£ C·∫•u h√¨nh base URL backend
// ƒê·ªãnh nghƒ©a URL c∆° b·∫£n c·ªßa API backend
// ================================
const API_BASE_URL = "http://localhost:3000"; // URL g·ªëc c·ªßa API backend (c√≥ th·ªÉ l√† server ho·∫∑c gateway)

// ================================
// 2Ô∏è‚É£ H√†m g·ªçi API chung
// H√†m ti·ªán √≠ch ƒë·ªÉ th·ª±c hi·ªán c√°c y√™u c·∫ßu HTTP (GET, POST, PUT, DELETE)
// ================================
/**
 * apiCall l√† helper ƒë·ªÉ g·ªçi t·∫•t c·∫£ c√°c API
 * - T·ª± ƒë·ªông th√™m token n·∫øu c√≥ trong localStorage
 * - H·ªó tr·ª£ FormData cho upload ·∫£nh
 * - GET request: g·∫Øn params
 * - POST/PUT/DELETE: g·∫Øn body
 * @param {string} method - Ph∆∞∆°ng th·ª©c HTTP (GET, POST, PUT, DELETE)
 * @param {string} url - ƒê∆∞·ªùng d·∫´n endpoint API
 * @param {object|FormData} data - D·ªØ li·ªáu g·ª≠i ƒëi (c√≥ th·ªÉ l√† object ho·∫∑c FormData)
 * @param {boolean} isForm - X√°c ƒë·ªãnh c√≥ ph·∫£i FormData kh√¥ng, m·∫∑c ƒë·ªãnh false
 */
const apiCall = async (method, url, data, isForm = false) => {
  const token = localStorage.getItem("token"); // L·∫•y token t·ª´ localStorage
  // T·∫°o headers, th√™m Authorization n·∫øu c√≥ token
  let headers = { ...(token ? { Authorization: `Bearer ${token}` } : {}) };

  // C·∫•u h√¨nh request cho axios
  let config = {
    method, // Ph∆∞∆°ng th·ª©c HTTP
    url: `${API_BASE_URL}${url}`, // URL ƒë·∫ßy ƒë·ªß c·ªßa API
    headers, // Headers (bao g·ªìm Authorization n·∫øu c√≥)
    withCredentials: true, // G·ª≠i cookie ƒë·ªÉ h·ªó tr·ª£ refresh token ho·∫∑c x√°c th·ª±c
  };

  // N·∫øu data l√† FormData, t·ª± ƒë·ªông ƒë·∫∑t isForm = true
  if (data instanceof FormData) {
    isForm = true;
  }

  // X·ª≠ l√Ω d·ªØ li·ªáu theo ph∆∞∆°ng th·ª©c HTTP
  if (method.toLowerCase() === "get" && data && typeof data === "object") {
    config.params = data; // GET: g·∫Øn data v√†o params
  } else if (data) {
    // POST/PUT/DELETE: g·∫Øn data v√†o body
    if (!isForm) headers["Content-Type"] = "application/json"; // ƒê·∫∑t Content-Type l√† JSON n·∫øu kh√¥ng ph·∫£i FormData
    config.data = data; // G·∫Øn data v√†o body
  }

  // Th·ª±c hi·ªán g·ªçi API v√† tr·∫£ v·ªÅ d·ªØ li·ªáu
  return (await axios(config)).data;
};

// ================================
// 3Ô∏è‚É£ Saga l·∫•y danh s√°ch tin t·ª©c
// X·ª≠ l√Ω action NEWS_LIST_REQUEST ƒë·ªÉ l·∫•y danh s√°ch tin t·ª©c
// ================================
function* listNewsSaga(action) {
  try {
    // G·ªçi API GET /news v·ªõi payload (c√°c filter nh∆∞ t√¨m ki·∫øm, pagination)
    const res = yield call(() => apiCall("get", "/news", action.payload));

    console.log("üîÑ News API res:", res); // Ghi log response ƒë·ªÉ debug
    if (import.meta.env.DEV) {
      console.log("üîÑ News data length:", res.data?.length || 0); // Debug: log s·ªë l∆∞·ª£ng tin t·ª©c tr·∫£ v·ªÅ
    }

    // Dispatch action success ƒë·ªÉ l∆∞u danh s√°ch tin t·ª©c v√†o redux
    yield put(actions.newsListSuccess(res));
  } catch (err) {
    // X·ª≠ l√Ω l·ªói
    console.error("üîÑ News API err:", err.response || err); // Ghi log l·ªói chi ti·∫øt
    const errorMsg = err.response?.data?.message || err.message || "L·ªói kh√¥ng x√°c ƒë·ªãnh"; // L·∫•y th√¥ng b√°o l·ªói

    // Dispatch action failure ƒë·ªÉ l∆∞u l·ªói v√†o redux
    yield put(actions.newsListFailure(errorMsg));
    // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói cho ng∆∞·ªùi d√πng
    toast.error(errorMsg);
  }
}

// ================================
// 4Ô∏è‚É£ Saga l·∫•y chi ti·∫øt tin t·ª©c theo ID
// X·ª≠ l√Ω action NEWS_GET_REQUEST ƒë·ªÉ l·∫•y chi ti·∫øt m·ªôt tin t·ª©c
// ================================
function* getNewsSaga(action) {
  try {
    // G·ªçi API GET /news/:id v·ªõi ID t·ª´ payload
    const res = yield call(() => apiCall("get", `/news/${action.payload}`));

    console.log("üîÑ News GET API res:", res); // Ghi log response ƒë·ªÉ debug

    // Dispatch action success ƒë·ªÉ l∆∞u chi ti·∫øt tin t·ª©c v√†o redux
    yield put(actions.newsGetSuccess(res));
  } catch (err) {
    console.error("üîÑ News GET API err:", err.response || err); // Ghi log l·ªói
    const errorMsg = err.response?.data?.message || err.message || "L·ªói kh√¥ng x√°c ƒë·ªãnh"; // L·∫•y th√¥ng b√°o l·ªói

    // Dispatch action failure ƒë·ªÉ l∆∞u l·ªói v√†o redux
    yield put(actions.newsGetFailure(errorMsg));
    // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
    toast.error(errorMsg);
  }
}

// ================================
// 5Ô∏è‚É£ Saga l·∫•y th·ªëng k√™ tin t·ª©c
// X·ª≠ l√Ω action NEWS_STATS_REQUEST ƒë·ªÉ l·∫•y th·ªëng k√™ (total, draft, published, archived)
// ================================
function* statsNewsSaga(action) {
  try {
    // G·ªçi API GET /news/stats v·ªõi payload (c√≥ th·ªÉ r·ªóng)
    const res = yield call(() => apiCall("get", "/news/stats", action.payload));

    console.log("üîÑ News Stats API res:", res); // Ghi log response ƒë·ªÉ debug

    // Dispatch action success ƒë·ªÉ l∆∞u th·ªëng k√™ v√†o redux
    yield put(actions.newsStatsSuccess(res));
  } catch (err) {
    console.error("üîÑ News Stats API err:", err.response || err); // Ghi log l·ªói
    const errorMsg = err.response?.data?.message || err.message || "L·ªói t·∫£i th·ªëng k√™"; // L·∫•y th√¥ng b√°o l·ªói

    // Dispatch action failure ƒë·ªÉ l∆∞u l·ªói v√†o redux
    yield put(actions.newsStatsFailure(errorMsg));
    // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
    toast.error(errorMsg);
  }
}

// ================================
// 6Ô∏è‚É£ Saga t·∫°o tin t·ª©c m·ªõi
// X·ª≠ l√Ω action NEWS_CREATE_REQUEST ƒë·ªÉ t·∫°o tin t·ª©c
// ================================
function* createNewsSaga(action) {
  try {
    // G·ªçi API POST /news v·ªõi payload (c√≥ th·ªÉ l√† FormData ƒë·ªÉ upload ·∫£nh)
    const res = yield call(() => apiCall("post", `/news`, action.payload));

    console.log("üîÑ News Create API res:", res); // Ghi log response ƒë·ªÉ debug

    // Dispatch action success ƒë·ªÉ l∆∞u tin t·ª©c m·ªõi v√†o redux
    yield put(actions.newsCreateSuccess(res));
    // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
    toast.success("T·∫°o tin t·ª©c th√†nh c√¥ng!");
  } catch (err) {
    console.error("üîÑ News Create API err:", err.response || err); // Ghi log l·ªói
    const errorMsg = err.response?.data?.message || err.message || "L·ªói kh√¥ng x√°c ƒë·ªãnh"; // L·∫•y th√¥ng b√°o l·ªói

    // Dispatch action failure ƒë·ªÉ l∆∞u l·ªói v√†o redux
    yield put(actions.newsCreateFailure(errorMsg));
    // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
    toast.error(errorMsg);
  }
}

// ================================
// 7Ô∏è‚É£ Saga c·∫≠p nh·∫≠t tin t·ª©c
// X·ª≠ l√Ω action NEWS_UPDATE_REQUEST ƒë·ªÉ c·∫≠p nh·∫≠t tin t·ª©c
// ================================
function* updateNewsSaga(action) {
  try {
    const { id, data } = action.payload; // L·∫•y ID v√† d·ªØ li·ªáu t·ª´ payload

    // G·ªçi API PUT /news/:id v·ªõi d·ªØ li·ªáu (c√≥ th·ªÉ l√† FormData)
    const res = yield call(() => apiCall("put", `/news/${id}`, data));

    console.log("üîÑ News Update API res:", res); // Ghi log response ƒë·ªÉ debug

    // Dispatch action success ƒë·ªÉ l∆∞u tin t·ª©c ƒë√£ c·∫≠p nh·∫≠t v√†o redux
    yield put(actions.newsUpdateSuccess(res));
    // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
    toast.success("C·∫≠p nh·∫≠t tin t·ª©c th√†nh c√¥ng!");
  } catch (err) {
    console.error("üîÑ News Update API err:", err.response || err); // Ghi log l·ªói
    const errorMsg = err.response?.data?.message || err.message || "L·ªói kh√¥ng x√°c ƒë·ªãnh"; // L·∫•y th√¥ng b√°o l·ªói

    // Dispatch action failure ƒë·ªÉ l∆∞u l·ªói v√†o redux
    yield put(actions.newsUpdateFailure(errorMsg));
    // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
    toast.error(errorMsg);
  }
}

// ================================
// 8Ô∏è‚É£ Saga x√≥a tin t·ª©c
// X·ª≠ l√Ω action NEWS_DELETE_REQUEST ƒë·ªÉ x√≥a tin t·ª©c
// ================================
function* deleteNewsSaga(action) {
  try {
    // G·ªçi API DELETE /news/:id v·ªõi ID t·ª´ payload
    const res = yield call(() => apiCall("delete", `/news/${action.payload}`));

    console.log("üîÑ News Delete API res:", res); // Ghi log response ƒë·ªÉ debug

    // Dispatch action success ƒë·ªÉ c·∫≠p nh·∫≠t state trong redux
    yield put(actions.newsDeleteSuccess(res));
    // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
    toast.success("X√≥a tin t·ª©c th√†nh c√¥ng!");
  } catch (err) {
    console.error("üîÑ News Delete API err:", err.response || err); // Ghi log l·ªói
    const errorMsg = err.response?.data?.message || err.message || "L·ªói kh√¥ng x√°c ƒë·ªãnh"; // L·∫•y th√¥ng b√°o l·ªói

    // Dispatch action failure ƒë·ªÉ l∆∞u l·ªói v√†o redux
    yield put(actions.newsDeleteFailure(errorMsg));
    // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
    toast.error(errorMsg);
  }
}

// ================================
// 9Ô∏è‚É£ Root saga: watch t·∫•t c·∫£ action
// Theo d√µi c√°c action li√™n quan ƒë·∫øn tin t·ª©c v√† g·ªçi saga t∆∞∆°ng ·ª©ng
// ================================
export default function* newsSaga() {
  // S·ª≠ d·ª•ng takeLatest ƒë·ªÉ x·ª≠ l√Ω action m·ªõi nh·∫•t cho m·ªói lo·∫°i request
  yield takeLatest(actions.NEWS_LIST_REQUEST, listNewsSaga); // Theo d√µi action l·∫•y danh s√°ch tin t·ª©c
  yield takeLatest(actions.NEWS_GET_REQUEST, getNewsSaga); // Theo d√µi action l·∫•y chi ti·∫øt tin t·ª©c
  yield takeLatest(actions.NEWS_STATS_REQUEST, statsNewsSaga); // Theo d√µi action l·∫•y th·ªëng k√™
  yield takeLatest(actions.NEWS_CREATE_REQUEST, createNewsSaga); // Theo d√µi action t·∫°o tin t·ª©c
  yield takeLatest(actions.NEWS_UPDATE_REQUEST, updateNewsSaga); // Theo d√µi action c·∫≠p nh·∫≠t tin t·ª©c
  yield takeLatest(actions.NEWS_DELETE_REQUEST, deleteNewsSaga); // Theo d√µi action x√≥a tin t·ª©c
}