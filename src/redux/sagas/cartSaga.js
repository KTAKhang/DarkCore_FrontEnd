import { call, put, takeLatest } from "redux-saga/effects"; // Import c√°c h√†m t·ª´ redux-saga ƒë·ªÉ qu·∫£n l√Ω side effects
import { toast } from "react-toastify"; // Import toast ƒë·ªÉ hi·ªÉn th·ªã th√¥ng b√°o
import axios from "axios"; // Import axios ƒë·ªÉ g·ªçi API
import {
  CART_GET_REQUEST,
  cartGetSuccess,
  cartGetFailure,
  CART_ADD_REQUEST,
  cartAddSuccess,
  cartAddFailure,
  CART_UPDATE_REQUEST,
  cartUpdateSuccess,
  cartUpdateFailure,
  CART_REMOVE_REQUEST,
  cartRemoveSuccess,
  cartRemoveFailure,
  CART_CLEAR_REQUEST,
  cartClearSuccess,
  cartClearFailure,
} from "../actions/cartActions"; // Import c√°c action types v√† creators t·ª´ cartActions

// ===== C·∫§U H√åNH =====
// ƒê·ªãnh nghƒ©a URL c∆° b·∫£n c·ªßa backend
const API_BASE_URL = "http://localhost:3000"; // URL g·ªëc c·ªßa API backend
console.log("üü¢ cartSaga loaded"); // Ghi log ƒë·ªÉ debug khi saga ƒë∆∞·ª£c load

// ================================
// 1Ô∏è‚É£ H√†m g·ªçi API chung (g·ª≠i request)
// H√†m ti·ªán √≠ch ƒë·ªÉ th·ª±c hi·ªán c√°c y√™u c·∫ßu HTTP v·ªõi axios
// ================================
const apiCall = async (method, url, data, isForm = false) => {
  console.log("üî¥ apiCall: Starting", { method, url, data }); // Ghi log th√¥ng tin request ƒë·ªÉ debug

  // L·∫•y token t·ª´ localStorage ƒë·ªÉ x√°c th·ª±c
  const token = localStorage.getItem("token");
  console.log("üî¥ apiCall: Token exists?", !!token); // Ghi log tr·∫°ng th√°i token
  if (!token) {
    console.error("üî¥ apiCall: No token found"); // Ghi log l·ªói n·∫øu kh√¥ng c√≥ token
    throw new Error("No token found"); // N√©m l·ªói n·∫øu kh√¥ng t√¨m th·∫•y token
  }

  try {
    // C·∫•u h√¨nh request cho axios
    const config = {
      method, // Ph∆∞∆°ng th·ª©c HTTP (get, post, put, delete)
      url: `${API_BASE_URL}${url}`, // URL ƒë·∫ßy ƒë·ªß c·ªßa API
      withCredentials: true, // G·ª≠i cookie n·∫øu c√≥ (d√πng cho refresh token)
      headers: {
        "Content-Type": isForm ? "multipart/form-data" : "application/json", // ƒê·ªãnh d·∫°ng d·ªØ li·ªáu
        Authorization: `Bearer ${token}`, // Th√™m token v√†o header
      },
      timeout: 5000, // Timeout 5 gi√¢y
    };

    // Th√™m d·ªØ li·ªáu v√†o config n·∫øu c√≥
    if (data !== undefined && data !== null) {
      config.data = data;
    }

    // Th·ª±c hi·ªán g·ªçi API
    const res = await axios(config);
    return res.data; // Tr·∫£ v·ªÅ d·ªØ li·ªáu t·ª´ response
  } catch (error) {
    // X·ª≠ l√Ω tr∆∞·ªùng h·ª£p token h·∫øt h·∫°n (401)
    if (error.response?.status === 401) {
      try {
        // G·ªçi API refresh token ƒë·ªÉ l·∫•y token m·ªõi
        const refreshRes = await axios.post(
          `${API_BASE_URL}/auth/refresh-token`,
          {},
          { withCredentials: true } // G·ª≠i cookie ƒë·ªÉ refresh token
        );
        const newToken = refreshRes.data?.token?.access_token; // L·∫•y token m·ªõi t·ª´ response
        if (newToken) {
          // L∆∞u token m·ªõi v√†o localStorage
          localStorage.setItem("token", newToken);

          // Retry request v·ªõi token m·ªõi
          const retryConfig = {
            method,
            url: `${API_BASE_URL}${url}`,
            withCredentials: true,
            headers: {
              "Content-Type": isForm
                ? "multipart/form-data"
                : "application/json",
              Authorization: `Bearer ${newToken}`, // S·ª≠ d·ª•ng token m·ªõi
            },
            timeout: 5000,
          };
          if (data !== undefined && data !== null) {
            retryConfig.data = data;
          }
          const retryRes = await axios(retryConfig); // Th·ª±c hi·ªán l·∫°i request
          return retryRes.data; // Tr·∫£ v·ªÅ d·ªØ li·ªáu t·ª´ retry
        }
      } catch (refreshError) {
        // N·∫øu refresh token th·∫•t b·∫°i, x√≥a token v√† user, chuy·ªÉn h∆∞·ªõng ƒë·∫øn login
        localStorage.removeItem("token");
        localStorage.removeItem("user");
        window.location.href = "/login"; // Chuy·ªÉn h∆∞·ªõng v·ªÅ trang ƒëƒÉng nh·∫≠p
        throw new Error("Phi√™n ƒëƒÉng nh·∫≠p h·∫øt h·∫°n, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i"); // N√©m l·ªói
      }
    }

    // X·ª≠ l√Ω c√°c l·ªói kh√°c
    const msg =
      error.response?.data?.message ||
      error.response?.data?.error ||
      error.message ||
      "Request failed"; // L·∫•y th√¥ng b√°o l·ªói t·ª´ response ho·∫∑c m·∫∑c ƒë·ªãnh

    console.error(
      `API Error [${method.toUpperCase()} ${url}]:`,
      msg,
      error.response?.data
    ); // Ghi log l·ªói chi ti·∫øt

    throw error; // N√©m l·ªói ƒë·ªÉ saga x·ª≠ l√Ω
  }
};

// ================================
// 2Ô∏è‚É£ Saga l·∫•y gi·ªè h√†ng
// X·ª≠ l√Ω action CART_GET_REQUEST ƒë·ªÉ l·∫•y th√¥ng tin gi·ªè h√†ng
// ================================
function* getCartSaga() {
  try {
    // G·ªçi API GET /cart ƒë·ªÉ l·∫•y gi·ªè h√†ng
    const response = yield call(() => apiCall("get", "/cart"));

    // Ki·ªÉm tra tr·∫°ng th√°i response
    if (response.status === "OK") {
      yield put(cartGetSuccess(response.cart)); // Dispatch action success v·ªõi d·ªØ li·ªáu gi·ªè h√†ng
      // toast.success(response.message || "L·∫•y gi·ªè h√†ng th√†nh c√¥ng!"); // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
    } else {
      throw new Error(response.message || "L·∫•y gi·ªè h√†ng th·∫•t b·∫°i"); // N√©m l·ªói n·∫øu response kh√¥ng OK
    }
  } catch (error) {
    const msg = error.message || "L·∫•y gi·ªè h√†ng th·∫•t b·∫°i"; // L·∫•y th√¥ng b√°o l·ªói
    console.error("getCartSaga error:", msg, error); // Ghi log l·ªói
    yield put(cartGetFailure(msg)); // Dispatch action failure
    toast.error(msg); // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
  }
}

// ================================
// 3Ô∏è‚É£ Saga th√™m s·∫£n ph·∫©m v√†o gi·ªè
// X·ª≠ l√Ω action CART_ADD_REQUEST ƒë·ªÉ th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
// ================================
function* addCartSaga(action) {
  try {
    // G·ªçi API POST /cart/add v·ªõi payload t·ª´ action
    const response = yield call(() =>
      apiCall("post", "/cart/add", action.payload)
    );

    // Ki·ªÉm tra tr·∫°ng th√°i response
    if (response.status === "OK") {
      yield put(cartAddSuccess(response.cart)); // Dispatch action success v·ªõi d·ªØ li·ªáu gi·ªè h√†ng
      toast.success(response.message || "Th√™m v√†o gi·ªè h√†ng th√†nh c√¥ng!"); // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
    } else {
      throw new Error(response.message || "Th√™m v√†o gi·ªè h√†ng th·∫•t b·∫°i"); // N√©m l·ªói n·∫øu response kh√¥ng OK
    }
  } catch (error) {
    // L·∫•y th√¥ng b√°o l·ªói t·ª´ backend
    let backendMsg = "";
    if (error.response) {
      backendMsg = error.response.data?.message || error.message || "";
    } else {
      backendMsg = error.message || "";
    }

    // X·ª≠ l√Ω th√¥ng b√°o ƒë·∫∑c bi·ªát
    if (backendMsg.includes("exceeds stock")) {
      toast.warning("S·ªë l∆∞·ª£ng s·∫£n ph·∫©m v∆∞·ª£t qu√° t·ªìn kho!"); // Th√¥ng b√°o n·∫øu v∆∞·ª£t qu√° t·ªìn kho
    } else if (backendMsg.includes("not found")) {
      toast.error("S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã x√≥a!"); // Th√¥ng b√°o n·∫øu s·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i
    } else {
      toast.error(backendMsg || "Th√™m v√†o gi·ªè h√†ng th·∫•t b·∫°i!"); // Th√¥ng b√°o l·ªói chung
    }

    yield put(cartAddFailure(backendMsg || "Th√™m v√†o gi·ªè h√†ng th·∫•t b·∫°i")); // Dispatch action failure
  }
}

// ================================
// 4Ô∏è‚É£ Saga c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
// X·ª≠ l√Ω action CART_UPDATE_REQUEST ƒë·ªÉ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè
// ================================
function* updateCartSaga(action) {
  try {
    const { productId, quantity } = action.payload; // L·∫•y productId v√† quantity t·ª´ payload
    // G·ªçi API PUT /cart/update/:productId v·ªõi body { quantity }
    const response = yield call(() =>
      apiCall("put", `/cart/update/${productId}`, { quantity })
    );

    // Ki·ªÉm tra n·∫øu response c√≥ l·ªói
    if (response.error) {
      throw new Error(response.error);
    }

    // Ki·ªÉm tra tr·∫°ng th√°i response
    if (response.status === "OK") {
      yield put(cartUpdateSuccess(response.cart)); // Dispatch action success v·ªõi d·ªØ li·ªáu gi·ªè h√†ng
      toast.success(response.message || "C·∫≠p nh·∫≠t gi·ªè h√†ng th√†nh c√¥ng!"); // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
    } else {
      throw new Error(response.message || "C·∫≠p nh·∫≠t gi·ªè h√†ng th·∫•t b·∫°i"); // N√©m l·ªói n·∫øu response kh√¥ng OK
    }
  } catch (error) {
    const backendMsg = error.response?.data?.message || ""; // L·∫•y th√¥ng b√°o l·ªói t·ª´ backend
    if (backendMsg.includes("exceeds stock")) {
      toast.warning("Kh√¥ng th·ªÉ tƒÉng th√™m ‚Äî v∆∞·ª£t qu√° t·ªìn kho!"); // Th√¥ng b√°o n·∫øu v∆∞·ª£t qu√° t·ªìn kho
    } else {
      toast.error("S·∫£n ph·∫©m v∆∞·ª£t qu√° t·ªìn kho"); // Th√¥ng b√°o l·ªói chung
    }

    yield put(cartUpdateFailure(backendMsg || "C·∫≠p nh·∫≠t gi·ªè h√†ng th·∫•t b·∫°i")); // Dispatch action failure
  }
}

// ================================
// 5Ô∏è‚É£ Saga x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè
// X·ª≠ l√Ω action CART_REMOVE_REQUEST ƒë·ªÉ x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
// ================================
function* removeCartSaga(action) {
  try {
    const { productId } = action.payload; // L·∫•y productId t·ª´ payload
    // G·ªçi API DELETE /cart/remove/:productId
    const response = yield call(() =>
      apiCall("delete", `/cart/remove/${productId}`)
    );

    // Ki·ªÉm tra tr·∫°ng th√°i response
    if (response.status === "OK") {
      yield put(cartRemoveSuccess(response.cart)); // Dispatch action success v·ªõi d·ªØ li·ªáu gi·ªè h√†ng
      toast.success(response.message || "X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng th√†nh c√¥ng!"); // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
    } else {
      throw new Error(response.message || "X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng th·∫•t b·∫°i"); // N√©m l·ªói n·∫øu response kh√¥ng OK
    }
  } catch (error) {
    const msg = error.message || "X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng th·∫•t b·∫°i"; // L·∫•y th√¥ng b√°o l·ªói
    console.error("removeCartSaga error:", msg, error.response?.data); // Ghi log l·ªói
    yield put(cartRemoveFailure(msg)); // Dispatch action failure
    toast.error(msg); // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
  }
}

// ================================
// 6Ô∏è‚É£ Saga x√≥a to√†n b·ªô gi·ªè h√†ng
// X·ª≠ l√Ω action CART_CLEAR_REQUEST ƒë·ªÉ x√≥a to√†n b·ªô gi·ªè h√†ng
// ================================
function* clearCartSaga() {
  try {
    // G·ªçi API DELETE /cart/clear
    const response = yield call(() => apiCall("delete", "/cart/clear"));
    // Ki·ªÉm tra tr·∫°ng th√°i response
    if (response.status === "OK") {
      yield put(cartClearSuccess(response.cart)); // Dispatch action success v·ªõi d·ªØ li·ªáu gi·ªè h√†ng
      toast.success(response.message || "X√≥a to√†n b·ªô gi·ªè h√†ng th√†nh c√¥ng!"); // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
    } else {
      throw new Error(response.message || "X√≥a to√†n b·ªô gi·ªè h√†ng th·∫•t b·∫°i"); // N√©m l·ªói n·∫øu response kh√¥ng OK
    }
  } catch (error) {
    const msg = error.message || "X√≥a to√†n b·ªô gi·ªè h√†ng th·∫•t b·∫°i"; // L·∫•y th√¥ng b√°o l·ªói
    console.error("clearCartSaga error:", msg, error); // Ghi log l·ªói
    yield put(cartClearFailure(msg)); // Dispatch action failure
    toast.error(msg); // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
  }
}

// ================================
// 7Ô∏è‚É£ Root saga: watch t·∫•t c·∫£ action li√™n quan gi·ªè
// Theo d√µi c√°c action li√™n quan ƒë·∫øn gi·ªè h√†ng v√† g·ªçi saga t∆∞∆°ng ·ª©ng
// ================================
export default function* cartSaga() {
  try {
    console.log("üî¥ cartSaga: Starting execution"); // Ghi log khi saga b·∫Øt ƒë·∫ßu

    // ƒêƒÉng k√Ω c√°c action v·ªõi takeLatest ƒë·ªÉ x·ª≠ l√Ω l·∫ßn l∆∞·ª£t
    yield takeLatest(CART_GET_REQUEST, getCartSaga); // Theo d√µi action l·∫•y gi·ªè h√†ng
    yield takeLatest(CART_ADD_REQUEST, addCartSaga); // Theo d√µi action th√™m s·∫£n ph·∫©m
    yield takeLatest(CART_UPDATE_REQUEST, updateCartSaga); // Theo d√µi action c·∫≠p nh·∫≠t gi·ªè h√†ng
    yield takeLatest(CART_REMOVE_REQUEST, removeCartSaga); // Theo d√µi action x√≥a s·∫£n ph·∫©m
    yield takeLatest(CART_CLEAR_REQUEST, clearCartSaga); // Theo d√µi action x√≥a to√†n b·ªô gi·ªè h√†ng

    console.log("üî¥ cartSaga: All takeLatest registered"); // Ghi log khi t·∫•t c·∫£ action ƒë∆∞·ª£c ƒëƒÉng k√Ω
  } catch (error) {
    console.error("üî¥ cartSaga ERROR:", error); // Ghi log n·∫øu c√≥ l·ªói trong root saga
  }
}